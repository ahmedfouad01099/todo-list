{"version":3,"sources":["components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","_this$props","this","props","item","handelChange","handelSubmit","editItem","react_default","a","createElement","className","onSubmit","type","placeholder","value","onChange","disabled","Component","TodoItem","title","handelDelete","handelEdit","onClick","TodoList","items","clearList","map","TodoItem_TodoItem","key","id","App","state","uuid","e","_this","setState","target","preventDefault","newItem","updatedItems","concat","Object","toConsumableArray","filterItems","filter","selectedItem","find","fiteredItems","TodoInput_TodoInput","TodoList_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff806bbd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class TodoInput extends Component {\n  render() {\n    const { item, handelChange, handelSubmit, editItem } = this.props;\n\n    return (\n      <div className=\"card card-body my-3\">\n        <form onSubmit={handelSubmit}>\n          <div className=\"input-group\">\n            <div className=\"input-group-prepend\">\n              <div className=\"input-group-text bg-primay text-white\">\n                <i className=\"fas fa-book\" />\n              </div>\n            </div>\n            <input type=\"text\"\n              className=\"form-control text-capitalize\"\n              placeholder=\"add todo item\"\n              value={item}\n              onChange={handelChange}\n            />\n          </div>\n          <button type=\"submit\"\n            disabled={item ? false : true}\n            className={editItem ? \"btn btn-block btn-success mt-3\" : \"btn btn-block btn-primary mt-3 text-uppercase\"}>\n            {editItem ? \"Edit Item\" : \"Add Item\"}</button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class TodoItem extends Component {\n  render() {\n    const { title, handelDelete, handelEdit } = this.props;\n    return (\n      <li className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\n        <p>{title}</p>\n        <div className=\"todo-icon\">\n          <span\n            className=\"mx-2 text-success\"\n            onClick={handelEdit}>\n            <i className=\"fas fa-pen\"></i>\n          </span>\n          <span\n            className=\"mx-2 text-danger\"\n            onClick={handelDelete}>\n            <i className=\"fas fa-trash\"></i>\n          </span>\n        </div>\n      </li>\n    )\n  }\n}\n","import React, { Component } from \"react\";\n// import Item from \"./TodoItem\";\nimport TodoItem from \"./TodoItem\";\nexport default class TodoList extends Component {\n  render() {\n    const { items, clearList, handelDelete, handelEdit } = this.props;\n    return (\n      <ul className=\"list-group my-5\">\n        <h3 className=\"text-capitalize text-center\">todo list</h3>\n        {items.map(item => {\n          return (\n            <TodoItem\n              key={item.id}\n              title={item.title}\n              handelDelete={() => handelDelete(item.id)}\n              handelEdit={() => handelEdit(item.id)}\n            >\n            </TodoItem>)\n        })}\n        <button\n          type=\"button\"\n          className=\"btn btn-danger btn-block text-uppercase mt-5\"\n          onClick={clearList}\n        >Clear List</button>\n      </ul>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport uuid from \"uuid\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"fontawesome/fontawesome-free-5.12.1-web/css/all.css\";\nimport TodoInput from \"./components/TodoInput\";\nimport TodoList from \"./components/TodoList\";\n// showing vs-code github setup\nclass App extends Component {\n  state = {\n    items: [],\n    id: uuid(),\n    item: \"\",\n    editItem: false,\n  };\n\n  handelChange = (e) => {\n    this.setState({\n      item: e.target.value,\n    });\n  };\n\n  handelSubmit = (e) => {\n    e.preventDefault();\n    const newItem = {\n      id: this.state.id,\n      title: this.state.item,\n    };\n    const updatedItems = [...this.state.items, newItem];\n    this.setState(\n      {\n        items: updatedItems,\n        item: \"\",\n        id: uuid(),\n        editItem: false,\n      } /*() => console.log(this.state)*/\n    );\n  };\n\n  clearList = (e) => {\n    this.setState({\n      items: [],\n    });\n  };\n\n  handelEdit = (id) => {\n    const filterItems = this.state.items.filter((item) => item.id !== id);\n    const selectedItem = this.state.items.find((item) => item.id === id);\n    this.setState({\n      items: filterItems,\n      item: selectedItem.title,\n      id: id,\n      editItem: true,\n    });\n  };\n\n  handelDelete = (id) => {\n    const fiteredItems = this.state.items.filter((item) => item.id !== id);\n    this.setState({ items: fiteredItems });\n  };\n  render() {\n    return (\n      <div>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-10 mx-auto col-md-8 mt-5\">\n              <h3 className=\"text-capitalize text-center\">todo input</h3>\n              <TodoInput\n                item={this.state.item}\n                handelChange={this.handelChange}\n                handelSubmit={this.handelSubmit}\n                editItem={this.state.editItem}\n              />\n              <TodoList\n                items={this.state.items}\n                clearList={this.clearList}\n                handelDelete={this.handelDelete}\n                handelEdit={this.handelEdit}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}